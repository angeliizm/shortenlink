version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    environment:
      POSTGRES_DB: auth_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - auth_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d auth_system"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auth_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    container_name: auth_backend
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/auth_system?sslmode=disable
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production-please-use-at-least-32-characters}
      ACCESS_TOKEN_DURATION: 15m
      REFRESH_TOKEN_DURATION: 168h
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
      ALLOWED_HEADERS: Content-Type,Authorization,X-Requested-With
      ALLOWED_METHODS: GET,POST,PUT,DELETE,OPTIONS
      COOKIE_DOMAIN: localhost
      SECURE_COOKIES: false
      ENVIRONMENT: development
    ports:
      - "8080:8080"
    networks:
      - auth_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Web App
  frontend:
    build:
      context: .
      dockerfile: web.Dockerfile
    container_name: auth_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NODE_ENV: production
    ports:
      - "3000:3000"
    networks:
      - auth_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

networks:
  auth_network:
    driver: bridge
    name: auth_network

volumes:
  postgres_data:
    name: auth_postgres_data
  redis_data:
    name: auth_redis_data